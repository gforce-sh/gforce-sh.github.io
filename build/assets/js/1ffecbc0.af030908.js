"use strict";(self.webpackChunkpage=self.webpackChunkpage||[]).push([[499],{3622:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=n(4848),t=n(8453);const a={sidebar_position:7,slug:"/conceptual-review"},r="The big picture",s={id:"Review",title:"The big picture",description:'"What makes a good programmer is how they think about the bigger picture and pay attention to breaking changes, and how',source:"@site/docs/Review.md",sourceDirName:".",slug:"/conceptual-review",permalink:"/react-basics/conceptual-review",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,slug:"/conceptual-review"},sidebar:"tutorialSidebar",previous:{title:"#4: Route my emoji",permalink:"/react-basics/lab/route-my-emoji"},next:{title:"Reach out to us!",permalink:"/react-basics/feedback"}},c={},d=[{value:"What does the big picture of our emoji app look like?",id:"what-does-the-big-picture-of-our-emoji-app-look-like",level:3},{value:"How did we refactor our demo app?",id:"how-did-we-refactor-our-demo-app",level:4},{value:"Examples of how we used key development concepts of React in our demo?",id:"examples-of-how-we-used-key-development-concepts-of-react-in-our-demo",level:3},{value:"1. Modularisation",id:"1-modularisation",level:4},{value:"2. Declarative vs Imperative",id:"2-declarative-vs-imperative",level:4},{value:"3. Component re-usability",id:"3-component-re-usability",level:4},{value:"4. Component hierarchy",id:"4-component-hierarchy",level:4},{value:"5. Flow of information",id:"5-flow-of-information",level:4}];function l(e){const o={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"the-big-picture",children:"The big picture"})}),"\n",(0,i.jsx)(o.admonition,{type:"tip",children:(0,i.jsx)(o.p,{children:'"What makes a good programmer is how they think about the bigger picture and pay attention to breaking changes, and how\nto rollback in case of a problem."'})}),"\n",(0,i.jsx)(o.h3,{id:"what-does-the-big-picture-of-our-emoji-app-look-like",children:"What does the big picture of our emoji app look like?"}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.img,{alt:"flow",src:n(809).A+"",width:"4152",height:"1966"})}),"\n",(0,i.jsxs)(o.p,{children:["The architecture of components, how they are composed and how they communicate with each other is critical in building a\nscalable application. Realising this architecture is generally not step one. We should have an idea of what the\ndesign of our application will look like just as we're starting to implement the app, but this will likely evolve and\nimprove as the granular details of our implementation become clearer, as we begin to identify code that overlaps in our\nimplementation, or as the business requirements evolve over time. We need to constantly ",(0,i.jsx)(o.strong,{children:"refactor"})," our implementation\nto reflect a cleaner and more understandable design, ",(0,i.jsx)(o.em,{children:"and we\ngenerally only have clarity of this final architecture just prior to the final refactor"}),". It is therefore imperative\nthat we write code in an agile manner, following OOP and SOLID principles. This ensures we can make changes sustainably\nand with the least effort."]}),"\n",(0,i.jsx)(o.p,{children:'Ultimately, as you spend more time working on React applications, how you reach the "big picture" will become clearer\nto you.'}),"\n",(0,i.jsx)(o.h4,{id:"how-did-we-refactor-our-demo-app",children:"How did we refactor our demo app?"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["We initially placed all our UI JSX to show 1 emoji row directly inside ",(0,i.jsx)(o.code,{children:"App"}),", when we wanted to just get the\napplication up and running. First, we refactored this UI into the ",(0,i.jsx)(o.code,{children:"EmojiRow"})," component."]}),"\n"]}),"\n",(0,i.jsxs)(o.p,{children:["Subsequently, our ",(0,i.jsx)(o.code,{children:"App"})," component consisted of several ",(0,i.jsx)(o.code,{children:"EmojiRow"}),"s and the Input components. Our second refactor was to\ngroup ",(0,i.jsx)(o.code,{children:"Input"})," and ",(0,i.jsx)(o.code,{children:"EmojiRow"}),"s inside a new ",(0,i.jsx)(o.code,{children:"EmojiSearch"})," component. This added semantic meaning by separating the\nresponsibility of ",(0,i.jsx)(o.code,{children:"App"})," and ",(0,i.jsx)(o.code,{children:"EmojiSearch"}),". This also gave us a clean enough architecture to integrate ",(0,i.jsx)(o.code,{children:"Routes"}),"\ninto ",(0,i.jsx)(o.code,{children:"App"})," in exercise 3."]}),"\n",(0,i.jsx)(o.h3,{id:"examples-of-how-we-used-key-development-concepts-of-react-in-our-demo",children:"Examples of how we used key development concepts of React in our demo?"}),"\n",(0,i.jsx)(o.h4,{id:"1-modularisation",children:"1. Modularisation"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"EmojiRow"})," formed into a modular component, that we then used with the Javascript ",(0,i.jsx)(o.code,{children:".map()"})," method to re-instantiate\nmultiple times for all emojis"]}),"\n",(0,i.jsx)(o.h4,{id:"2-declarative-vs-imperative",children:"2. Declarative vs Imperative"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"EmojiRow"})," was re-instantiated for each emoji that the endpoint returned. We didn't have to keep track of how many rows\nwe needed to create in HTML every time we changed the input. We just ",(0,i.jsx)(o.em,{children:"declared"})," what the row should look like, and React\nhandled the rest for every emoji the server returned."]}),"\n",(0,i.jsx)(o.h4,{id:"3-component-re-usability",children:"3. Component re-usability"}),"\n",(0,i.jsxs)(o.p,{children:["We were able to reuse ",(0,i.jsx)(o.code,{children:"EmojiRow"})," and ",(0,i.jsx)(o.code,{children:"List"})," multiple times. Even ",(0,i.jsx)(o.code,{children:"Loader"})," and ",(0,i.jsx)(o.code,{children:"Placeholder"})," that we imported\nfrom ",(0,i.jsx)(o.code,{children:"semantic-ui"}),' are modular re-usable components that we can "plug-and-play" anywhere in our app.']}),"\n",(0,i.jsx)(o.h4,{id:"4-component-hierarchy",children:"4. Component hierarchy"}),"\n",(0,i.jsx)(o.p,{children:"This allows us to separate concerns of functionality."}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["We were able to abstract away logic to route to different components by wrapping our search and details pages\ninside ",(0,i.jsx)(o.code,{children:"<Routes/>"}),"."]}),"\n",(0,i.jsxs)(o.li,{children:["We carried out all the external data fetching in parent component ",(0,i.jsx)(o.code,{children:"EmojiSearch"}),", and passed the data to\nchild ",(0,i.jsx)(o.code,{children:"EmojiRow"}),"s."]}),"\n"]}),"\n",(0,i.jsx)(o.h4,{id:"5-flow-of-information",children:"5. Flow of information"}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.img,{alt:"data",src:n(1547).A+"",width:"2480",height:"1964"})})]})}function h(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},809:(e,o,n)=>{n.d(o,{A:()=>i});const i=n.p+"assets/images/emoji-demo-flow-diagram-703685aef5653baa154be8642df56f6d.png"},1547:(e,o,n)=>{n.d(o,{A:()=>i});const i=n.p+"assets/images/flow-of-data-demo-a202efd2fcd0e64a58ac00267d768743.png"},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>s});var i=n(6540);const t={},a=i.createContext(t);function r(e){const o=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:o},e.children)}}}]);