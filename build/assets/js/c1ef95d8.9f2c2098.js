"use strict";(self.webpackChunkpage=self.webpackChunkpage||[]).push([[460],{8558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=t(4848),s=t(8453);const a={sidebar_position:2,slug:"more-useful-principles"},o="More Principles",r={id:"clean-code/MorePrinciples",title:"More Principles",description:"Object-Oriented Design is about modelling concepts with classes/objects, and",source:"@site/docs/clean-code/MorePrinciples.md",sourceDirName:"clean-code",slug:"/clean-code/more-useful-principles",permalink:"/software-basics/clean-code/more-useful-principles",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"more-useful-principles"},sidebar:"tutorialSidebar",previous:{title:"SOLID",permalink:"/software-basics/clean-code/solid-principles"},next:{title:"Reach out!",permalink:"/software-basics/feedback"}},l={},c=[{value:"More Important Principles",id:"more-important-principles",level:2},{value:"Law of Demeter",id:"law-of-demeter",level:3},{value:"Avoid Hasty Generalisations",id:"avoid-hasty-generalisations",level:3},{value:"Prefer composition over inheritance",id:"prefer-composition-over-inheritance",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"more-principles",children:"More Principles"})}),"\n",(0,i.jsx)(n.p,{children:"Object-Oriented Design is about modelling concepts with classes/objects, and\nmanaging their dependencies. It is a set of coding techniques that arrange\ndependencies such that objects can tolerate future changes."}),"\n",(0,i.jsx)(n.h2,{id:"more-important-principles",children:"More Important Principles"}),"\n",(0,i.jsx)(n.h3,{id:"law-of-demeter",children:"Law of Demeter"}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.a,{href:"https://www.baeldung.com/java-demeter-law#:~:text=The%20Law%20of%20Demeter%20is,interact%20with%20its%20immediate%20dependencies.",children:"source"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aka principle of least knowledge."}),"\n",(0,i.jsx)(n.li,{children:"Goal: to build components that are less dependent on each other and loosely\ncoupled."}),"\n",(0,i.jsx)(n.li,{children:"Recommends that objects should avoid accessing the internal data and methods\nof other objects. Instead, an object should only interact with its immediate\ndependencies."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Instead of"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Expenses expenses = new Expenses(100, 10);\nEmployee employee = new Employee();\n\nemployee.\n\ngetDepartment().\n\ngetManager().\n\napproveExpense(expenses);\n"})}),"\n",(0,i.jsx)(n.p,{children:"we should write"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Expenses expenses = new Expenses(100, 10);\nManager manager = new Manager();\nEmployee employee = new Employee(manager);\n\nemployee.\n\nsubmitExpense(expenses);\n"})}),"\n",(0,i.jsx)(n.p,{children:"The Law says that a method_X_of class_C_should only invoke the methods of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Class_C_itself"}),"\n",(0,i.jsxs)(n.li,{children:["An object created by",(0,i.jsx)(n.em,{children:"X"})]}),"\n",(0,i.jsxs)(n.li,{children:["An object passed as an argument to",(0,i.jsx)(n.em,{children:"X"})]}),"\n",(0,i.jsxs)(n.li,{children:["An object held in an instance variable of",(0,i.jsx)(n.em,{children:"C"})]}),"\n",(0,i.jsx)(n.li,{children:"A static field"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/dldviopcu/image/upload/v1733416093/CleanCode-20240807170810292.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/dldviopcu/image/upload/v1733416093/CleanCode-20240807170840991.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/dldviopcu/image/upload/v1733416093/CleanCode-20240807170920857.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/dldviopcu/image/upload/v1733416093/CleanCode-20240807170946795.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/dldviopcu/image/upload/v1733416093/CleanCode-20240807171007110.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"Basically, don't let one class or method look into and expose the\nimplementation (methods, vars, state) of another class. When chaining, this\nmight be the case. Might - there's an exception for the builder pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'BankAccount newAccount = new BankAccount\n        .BankAccountBuilder("Jon", "22738022275")\n        .withEmail("jon@example.com")\n        .wantNewsletter(true)\n        .build();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Above, *\n*the",(0,i.jsx)(n.a,{href:"https://www.baeldung.com/creational-design-patterns#builder",children:"builder pattern"}),"\ndoesn\u2019t violate the Law of Demeter if the builder is instantiated locally**.\nOne\nof the rules states that \u201cMethod",(0,i.jsx)(n.em,{children:"X_of class_C_should only invoke the methods of\nan object created by_X"}),"\u201c."]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, there are chained calls\nin",(0,i.jsx)(n.a,{href:"https://www.baeldung.com/java-fluent-interface-vs-builder-pattern",children:"Fluent APIs"}),".\n",(0,i.jsx)(n.strong,{children:"Fluent APIs don\u2019t violate the Law of Demeter if the chained calls are on\nlocally created objects"}),". But when the chained calls are on a non-locally\ninstantiated object or returns a different object, then it violates the Law of\nDemeter."]}),"\n",(0,i.jsxs)(n.p,{children:["Also, there are cases where we could violate the Law of Demeter when dealing\nwith data structures.",(0,i.jsx)(n.strong,{children:"The typical data structure usage, like instantiating,\nmutating, and accessing them locally, doesn\u2019t violate the Law of Demeter"}),". In a\ncase where we\u2019re calling a method on an object obtained from a data structure,\nthen the Law of Demeter may be violated."]}),"\n",(0,i.jsx)(n.p,{children:"From Thoughtworks:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/dldviopcu/image/upload/v1733416093/CleanCode-20240807181746971.png",alt:""})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"avoid-hasty-generalisations",children:"Avoid Hasty Generalisations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer duplication"}),": If you're unsure about the correct abstraction, it's\nbetter to have duplicated code temporarily until you fully understand the\ncommonalities and requirements for abstraction."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identify commonalities"}),": Look for patterns and similarities in the\nduplicated code. When you notice parts that can be generalized, you'll be in a\nbetter position to provide meaningful abstractions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider future requirements"}),': Instead of prematurely optimizing for\nperformance or designing the "perfect" API, focus on code that can easily\nadapt to future changes.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid premature abstractions"}),": If you abstract too early, you might end up\nwith complex code that's difficult to maintain. Wait until you have a good\nunderstanding of the use cases before creating abstractions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mindful Abstraction"}),": When the commonalities are clear, it's the right time\nto create abstractions. Abstract out the shared functionality into functions\nor modules that accurately capture the essence of the problem.\n(",(0,i.jsx)(n.a,{href:"https://www.franciscomoretti.com/code-tips/avoid-hasty-abstractions-aha",children:"Source"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"prefer-composition-over-inheritance",children:"Prefer composition over inheritance"}),"\n",(0,i.jsx)(n.p,{children:'Inheritance models an "is-a" relationship, which can lead to complexity and code\nduplication. Composition, on the other hand, models a "has-a" relationship,\npromoting flexibility and maintainability by combining existing components. Keep\nthis in mind.'}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);